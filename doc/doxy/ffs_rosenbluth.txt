/**
 *  \page ffs_rosenbluth Rosenbluth Method
 *

\tableofcontents

\section ffs_rosenbluth_overview Overview

The Rosenbluth variant of FFS is similar to to the branched approach,
with the difference that not all trajectories are followed to their end.
The advantage to the Rosenbluth approach is then that it does not lead
to a geometric increase in the number of branches as one moves across
the interfaces. (This increase in trajectories, and hence computational
cost, can be particularly acute at later interfaces using the branched
variant.) This is similar in spirit to a method originally used for the
generation of polymer configurations [1] via a Monte Carlo technique,
although we use no Metropolis acceptance/rejection criterion here.

-----

\section ffs_rosenbluth_desc Description

For a state at interface \f$ \lambda_i \f$, we can apply
the following recursive procedure:

1. Fire \f$ k_i \f$ trial runs at the next interface \f$ \lambda_{i+1} \f$
and store the end points of successful trials. Define the number of
successful trials to be \f$ S_{i} \f$, with associated success rate
\f$ S_i / k_i \f$.
2. If there are no successful trials, or the trial has reached
\f$ \lambda_B \f$, end the recursion.
3. If there are successful trials, choose one at random and repeat from
step 1 for the next interface.

This is illustrated in the following diagram:

![](./rosenbluth1.gif "Rosenbluth illustration")

Here, state \f$ R_i \f$ at interface \f$ i \f$
is assumed to be a result of a previous trajectory with weight
\f$ w_i = 1 \f$. If three trials (\f$ k_i = 3\f$) are started
from this state, two of which are successful (ending in states
\f$ R_{i+1}^1 \f$ and \f$ R_{i+1}^2 \f$), and one of which fails,
the success rate \f$ S_i = 2/3 \f$. We can then select one of two
states \f$ R_{i+1}^1 \f$ and \f$ R_{i+1}^2 \f$ at random (here, say, 
\f$ R_{i+1}^2 \f$), to be the starting point for trials to the next
interface. Three trials from \f$ R_{i+1}^2 \f$ result in one success
are two failures so \f$ S_{i+1} = 1/3 \f$.
 
In this method, the paths generated do not have equal weights.
Trajectories
fired from \f$ R_i \f$ at the initial interface start with weight
unity. In general, the weight of a given
trajectory reaching interface \f$ i+1 \f$ is
\f[
w_{i+1} = \Pi_{j=1}^{i} S_j / k_j.
\f]
In the above illustration, the weight of the trajectory reaching
state \f$ R_{i+1}^2 \f$ is \f$ 1 \times 2/3 = 2/3\f$, while the
weight of that reaching state \f$ R_{i+2} \f$ is
\f$ 1 \times 2/3 \times 1/3 = 2/9 \f$, being the product of the
weights of trajectories making up the path to \f$ R_{i+2} \f$.


To compute the conditional probability of reaching one interface
from the previous one, we require
\f[
P(\lambda_{i+1} | \lambda_i )
= \frac{\sum_R w_i S_i / k_i}{\sum_R w_i}
\f]
where the sum over trajectories associated with the states at
the relevant interfaces is performed.  Note that states not
associated with forward trials, e.g., \f$ R_{i+1}^1 \f$ in the
illustration, do not contribute directly to the sums at a given
interface, but contribute via the success rate.

\section ffs_rosenbluth_parallel In parallel

In parallel, initial states from the first interface can be computed
independently, and the contributions to the sum accumulated at
interface collected when all trials are complete. This makes
this version of the Rosenbluth scheme well-suited to parallel
decomposition.


-----

\section ffs_resoenbluth_ref Reference


-# MN Rosenbluth nad AW Rosenbluth\n
   Monte Carlo calculation of the average extension of polymer chains,\n
   *J. Chem. Phys.* 23 356 (1955).

*/
